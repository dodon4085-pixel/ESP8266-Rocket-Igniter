// ðŸ”¥ ULTRA STABLE ESP8266 SYSTEM - BY BISWAJIT ðŸ”¥
// âœ… ALL BUGS FIXED - PRODUCTION READY

#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>

const char* ssid = "Biswajit_Igniter";
const char* password = "ignite123";

ESP8266WebServer server(80);

// âœ… ESP8266 Pins
#define IGNITION_PIN 5   // D1
#define STATUS_LED 2     // D4 (Built-in LED - Active LOW)

// âœ… Global Variables
bool ignitionActive = false;
bool countdownActive = false;
unsigned long countdownStartTime = 0;
unsigned long ignitionStartTime = 0;
int currentMode = 1;
int selectedTimer = 5;
const unsigned long NICHROME_TIME = 4000;

// âœ… Simple HTML in PROGMEM
const char htmlPage[] PROGMEM = R"raw(
<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
        body { background: #000; color: #f00; font-family: Arial; margin: 0; padding: 20px; text-align: center; }
        .container { max-width: 300px; margin: 0 auto; background: #111; padding: 20px; border: 2px solid #f00; }
        .status { font-size: 18px; margin: 15px 0; font-weight: bold; }
        .countdown { font-size: 40px; font-weight: bold; margin: 20px 0; color: #f00; }
        .btn-row { display: flex; gap: 5px; margin: 10px 0; }
        .btn { flex: 1; background: #222; color: #f00; border: 1px solid #f00; padding: 10px; cursor: pointer; }
        .btn.active { background: #f00; color: #000; }
        .ignite-btn { background: #f00; color: #000; border: none; padding: 15px; font-size: 18px; font-weight: bold; cursor: pointer; width: 100%; margin: 20px 0; }
        .ignite-btn:disabled { background: #333; color: #666; }
        .error { color: #ff4444; font-size: 14px; margin: 10px 0; }
    </style>
</head>
<body>
    <div class="container">
        <div style="color:#888;font-size:12px;">By Biswajit</div>
        <div class="status">%STATUS%</div>
        <div class="countdown">%COUNTDOWN%</div>
        <div class="error">%ERROR%</div>
        
        <div class="btn-row">
            <button class="btn %MODE1%" onclick="location.href='/mode?m=1'">TIMER</button>
            <button class="btn %MODE2%" onclick="location.href='/mode?m=2'">INSTANT</button>
        </div>
        
        <div class="btn-row">
            <button class="btn %TIME5%" onclick="location.href='/time?t=5'">5s</button>
            <button class="btn %TIME10%" onclick="location.href='/time?t=10'">10s</button>
            <button class="btn %TIME15%" onclick="location.href='/time?t=15'">15s</button>
        </div>
        
        <button class="ignite-btn" onclick="location.href='/ignite'" %DISABLED%>IGNITE</button>
    </div>
    
    <script>setTimeout(()=>location.reload(),1000);</script>
</body>
</html>
)raw";

void setup() {
    Serial.begin(115200);
    delay(2000);
    
    Serial.println();
    Serial.println("ðŸš€ STARTING SYSTEM...");
    
    // âœ… Safe Pin Setup
    pinMode(IGNITION_PIN, OUTPUT);
    pinMode(STATUS_LED, OUTPUT);
    digitalWrite(IGNITION_PIN, LOW);
    digitalWrite(STATUS_LED, HIGH); // Start with LED OFF
    
    // âœ… WiFi with Error Handling
    Serial.print("Starting WiFi... ");
    if (WiFi.softAP(ssid, password)) {
        Serial.println("OK");
        Serial.print("IP: ");
        Serial.println(WiFi.softAPIP());
    } else {
        Serial.println("FAILED");
        return;
    }
    
    // âœ… Route Handlers with Better Error Handling
    server.on("/", []() {
        String html = FPSTR(htmlPage);
        
        if (countdownActive) {
            unsigned long elapsed = (unsigned long)(millis() - countdownStartTime);
            unsigned long remaining = (selectedTimer * 1000UL) - elapsed;
            int seconds = (remaining + 999) / 1000; // Ceiling division
            if (seconds < 0) seconds = 0;
            
            html.replace("%STATUS%", "COUNTDOWN ACTIVE");
            html.replace("%COUNTDOWN%", String(seconds));
            html.replace("%DISABLED%", "disabled");
            html.replace("%ERROR%", "");
        }
        else if (ignitionActive) {
            unsigned long elapsed = (unsigned long)(millis() - ignitionStartTime);
            unsigned long remaining = NICHROME_TIME - elapsed;
            int seconds = (remaining + 999) / 1000;
            if (seconds < 0) seconds = 0;
            
            html.replace("%STATUS%", "IGNITION ACTIVE");
            html.replace("%COUNTDOWN%", String(seconds));
            html.replace("%DISABLED%", "disabled");
            html.replace("%ERROR%", "ðŸ”¥ NICHROME HEATING");
        }
        else {
            html.replace("%STATUS%", "SYSTEM READY");
            html.replace("%COUNTDOWN%", "READY");
            html.replace("%DISABLED%", "");
            html.replace("%ERROR%", "");
        }
        
        html.replace("%MODE1%", currentMode == 1 ? "active" : "");
        html.replace("%MODE2%", currentMode == 2 ? "active" : "");
        html.replace("%TIME5%", selectedTimer == 5 ? "active" : "");
        html.replace("%TIME10%", selectedTimer == 10 ? "active" : "");
        html.replace("%TIME15%", selectedTimer == 15 ? "active" : "");
        
        server.send(200, "text/html", html);
    });
    
    server.on("/mode", []() {
        if (!ignitionActive && !countdownActive) {
            String m = server.arg("m");
            if (m == "1" || m == "2") {
                currentMode = m.toInt();
                Serial.println("Mode changed to: " + m);
            }
        }
        server.sendHeader("Location", "/");
        server.send(302, "text/plain", "");
    });
    
    server.on("/time", []() {
        if (!ignitionActive && !countdownActive) {
            String t = server.arg("t");
            if (t == "5" || t == "10" || t == "15") {
                selectedTimer = t.toInt();
                Serial.println("Timer changed to: " + t + "s");
            }
        }
        server.sendHeader("Location", "/");
        server.send(302, "text/plain", "");
    });
    
    server.on("/ignite", []() {
        if (!ignitionActive && !countdownActive) {
            if (currentMode == 1) {
                countdownActive = true;
                countdownStartTime = millis();
                Serial.println("COUNTDOWN STARTED: " + String(selectedTimer) + "s");
            } else {
                ignitionActive = true;
                ignitionStartTime = millis();
                digitalWrite(IGNITION_PIN, HIGH);
                Serial.println("NICHROME: INSTANT ACTIVATION");
            }
            server.sendHeader("Location", "/");
            server.send(302, "text/plain", "");
        } else {
            server.send(200, "text/plain", "SYSTEM BUSY - Wait for completion");
        }
    });
    
    server.begin();
    Serial.println("âœ… SYSTEM READY - ALL BUGS FIXED");
}

void loop() {
    server.handleClient();
    
    unsigned long now = millis();
    
    // âœ… FIXED: Millis overflow protection
    if (countdownActive) {
        if ((unsigned long)(now - countdownStartTime) >= (selectedTimer * 1000UL)) {
            countdownActive = false;
            ignitionActive = true;
            ignitionStartTime = now;
            digitalWrite(IGNITION_PIN, HIGH);
            Serial.println("NICHROME: ACTIVATED AFTER COUNTDOWN");
        }
    }
    
    // âœ… FIXED: Ignition timeout with overflow protection
    if (ignitionActive) {
        if ((unsigned long)(now - ignitionStartTime) >= NICHROME_TIME) {
            ignitionActive = false;
            digitalWrite(IGNITION_PIN, LOW);
            Serial.println("SYSTEM: SAFE - IGNITION STOPPED");
        }
    }
    
    // âœ… FIXED: LED Status (Active LOW logic)
    if (countdownActive) {
        // Blink fast during countdown
        digitalWrite(STATUS_LED, (now % 500) < 250 ? LOW : HIGH);
    } else if (ignitionActive) {
        // Solid ON during ignition (LOW = ON for built-in LED)
        digitalWrite(STATUS_LED, LOW);
    } else {
        // Slow blink when ready
        digitalWrite(STATUS_LED, (now % 2000) < 100 ? LOW : HIGH);
    }
    
    delay(50); // Smoother response
}